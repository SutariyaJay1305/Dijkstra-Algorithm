Dijkstra's Shortest Path Algorithm - Documentation

Introduction:
Dijkstra's algorithm is a popular algorithm used to find the shortest path between nodes in a graph, especially when all the edge weights are non-negative. It works by repeatedly selecting the vertex with the minimum distance from the source vertex and updating the distances of its adjacent vertices. This process continues until all vertices are visited.

Implementation Details:
- The program is implemented in Python and uses a class-based approach.
- The Graph class has methods for initializing the graph, computing shortest paths, and displaying results.
- It takes an adjacency matrix as input, where graph[i][j] represents the weight of the edge between vertices i and j.
- The computeShortestPath method implements Dijkstra's algorithm.
- The displayResults method prints the shortest distances from the source vertex to all other vertices.

Insights:
- Dijkstra's algorithm is a greedy algorithm that guarantees the shortest path from the source vertex to all other vertices in a graph.
- It maintains a set of vertices whose shortest distance from the source is already known.
- The algorithm iteratively selects the vertex with the minimum distance from the source among the vertices not yet processed, updates the distances of its adjacent vertices, and adds it to the set of processed vertices.
- The process continues until all vertices are processed.

Results:
- When executed with the provided graph, the program correctly calculates the shortest distances from the source vertex to all other vertices.

Conclusion:
Dijkstra's algorithm is an efficient method for finding shortest paths in weighted graphs. Understanding its working principle and implementation details is essential for solving various graph-related problems.

